---
layout: post
title:  "《GitHub入门与实践》读书笔记"
description: 主要记录了《GitHub入门与实践》相关读书笔记
date:   2019-10-06 10:07:36
categories: GitHub
---

文|Serpah   
本文主要记录了《GitHub入门与实践》相关读书笔记。    

### 01 | Git前期准备
首先从官网下载并安装好[Git](https://git-scm.com)，安装过程比较简单，这里不赘述。
安装以后，打开命令终端，输入`git`，如提示如下一系列帮助说明，则表示Git安装成功。   
![Git命令](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LTZlNTA0NjJkYjljZDYzOGMucG5n?x-oss-process=image/format,png)
接下来需要对Git环境进行一些初始化设置。
##### 初始化设置
1. 设置用户名和邮箱 
```
git config --global user.name "Seraph"
git config --global user.email "your_email@example.com"
```
注意该用户及邮箱信息会在我们提交代码时，在GitHub上公开。
2. 设置输出命令字体颜色
```
 git config --global color.ui auto
```
上述命令信息会写入到`.gitconfig`文件中。
该文件在Mac系统下的路径为：`~/.gitconfig`
在Windows系统下的路径为：`C:\Users\当前用户名\.gitconfig`
注意：我们可以使用`cat`命令查看`.gitconfig`文件内容：   
![cat命令](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LTRkNWE0N2RjZTg4MmM1MDAucG5n?x-oss-process=image/format,png)

### 02 | GitHub前期准备
##### 设置SSH Key
1. 输入` ssh-keygen -t rsa -C "your_email@example.com"`命令，按提示操作创建SSH Key。
![创建SSH Key](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LTZmNjYxZTYzNzc4ZmEwZmYucG5n?x-oss-process=image/format,png)
注意：`id-rsa`是私有密钥，`id_rsa.pub`是公有密钥。
2. 在GitHub账户中添加公开密钥
将`id_rsa.pub`里的内容添加至GitHub账户`Personal Setting--SSH and GPG keys`中：   
![添加公开密钥](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LTBjMTU5YTFkODViODQzZTgucG5n?x-oss-process=image/format,png)
3. 使用Git连接GitHub
输入`ssh -T git@github.com`命令：   
![连接GitHub](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LWUzNmY0Mzk3MjFmNTliNjcucG5n?x-oss-process=image/format,png)
注意红色箭头处输入刚才创建SSH Key输入的密码（密码输入不会显示出来哟）。

### 03 | 简单使用
首先在GitHub网站上，手动创建一个自己的仓库。（这个自己熟悉一下GitHub的使用就能会了，很简单。）
然后尝试如下操作
1. clone已有仓库
打开刚刚创建的仓库页面，复制`Clone or download`的中的路径（如下红色框内链接）：   
![复制库链接](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LTIwNTkzY2ZkZTY4NWYxNWIucG5n?x-oss-process=image/format,png)
输入`git clone  git@github.com:Seraph1990/OpenCV-Code.git`，命令后面的路径为刚才复制的库路径。   
![git clone](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LTFkM2E1ZDIzNjE0ZGUwNzkucG5n?x-oss-process=image/format,png)
连接GitHub很多操作都会提示`Enter passphrase for key '/c/Users/Administrator/.ssh/id_rsa':`，这里输入创建SSH-Key时的密码即可。
2. 修改并提交
修改clone下来的文件，然后进入项目目录，输入`git status`能获取当前本地库的状态。   
 ![git status](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LWVhOWI5M2VlMjE0MzExM2QucG5n?x-oss-process=image/format,png)
可以发现cameo.py文件已经被我改动。
使用`git add Cameo/cameo.py`命令将修改文件cameo.py加如暂存区，再使用`git commit -m "Add Test Git"`命令提交修改文件：   
![git add /commit](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LTU0MDkzMzc4Yzk3ZmE0NjcucG5n?x-oss-process=image/format,png)
使用`git log`查询提交日志：   
![git log](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LTc1OWQyZmU4YTc3M2I4NDgucG5n?x-oss-process=image/format,png)
3. 提交至GitHub
使用`git push`直接提交至GitHub，这样就能在GitHub上的库看见我们所做的改动了。   
![git push](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LTZlOTBlZjQxYzFiNzAxZmQucG5n?x-oss-process=image/format,png)

### 04 | Git常用命令
1. git init---初始化仓库
首先使用`mkdir`命令新建一个目录。然后进入目录，使用`git init`初始化新的仓库。   
![git init](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LTFlMjczNmQ0Mzk3ZWNhZGUucG5n?x-oss-process=image/format,png)
2. git status---查看仓库状态   
使用`git status`可以查看当前仓库的状态，比如当前处于哪个分支，有哪些内容修改，哪些内容处于未提交状态。（如下因为刚初始化仓库，所以提示未有任何提交）   
![git status](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LWJmNDJlYjNjZjYxYzQ3MmQucG5n?x-oss-process=image/format,png)
我们在当前目录添加一个`README.md`文件，再次输入`git status`命令便会得到当前修改的情况。   
![git status](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LTUxYWM0MzczNTc0MTkzYzUucG5n?x-oss-process=image/format,png)

3. git add---向暂存区添加文件
刚修改的文件，使用`git add`命令向暂存区添加文件以后，注意文件状态就由`Untracked files`变成`Changes to be committed`。  
![git add](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LTkwMzZlOGEwMDM2OGJkYWIucG5n?x-oss-process=image/format,png)

4. git commit---保存仓库的历史纪录
使用`git commit`可以注释我们的提交信息，让我们知道每次提交都做了什么改动。提交完以后，使用`git status`再次查看库的状态，发现提示没有任何更改。   
![git commit](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LTlhYTE2ZDVhM2FkYTM2NGEucG5n?x-oss-process=image/format,png)
如果我们需要记录更多的修改信息可以直接使用不带`-m`参数的`git commit`命令，在弹出的编辑器里`1`位置输入修改简述，然后隔行在`2`位置输入详细修改内容：  
![git commit](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LWVjMTEzOWE2NGIzYTc4YmYucG5n?x-oss-process=image/format,png)
以上还以可以看见此次修改的文件信息。
注意编辑器使用的是`Vim`，关于该编辑器的使用请稍微熟悉一下。

5. git log---查看提交日志
使用`git log`可以查看刚才的提交日志，我实际上提交了三次，所以有3次提交记录：   
![git log](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LWVhOTU3NmNhZDg5MTQ2NDUucG5n?x-oss-process=image/format,png)
也可查看指定文件夹或文件提交信息：   
![git log](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LWQ3NGRmNDhmYTdhODk0MDUucG5n?x-oss-process=image/format,png)
图中每个`commit`后面的一串数字为唯一的哈希值，能唯一匹配到指定的修改状态，这个后续恢复库的状态会用到。
使用`git log -p`可以查看提交对文件文件的改动内容。

6. git diff---查看更改前后的差别
`git diff`命令可以查看工作树、暂存区的差别。如上面的`git log -p`其实就调用了`git diff`命令。   
![git diff](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LWFjZjg3MDk1MTBkODM3YTUucG5n?x-oss-process=image/format,png)
使用`git diff HEAD`命令可以查看暂存区内容与上次提交有什么差别。
其中，`HEAD`指向的是当前分支最新一次提交。
在我们每次提交时，最好使用`git diff HEAD`对比一下，并确认两次提交的差别，再提交。


















4. Windows Hub安装   
[Hub DownLoad](https://github.com/github/hub/releases)
选择Windows版本
解压文件，双击``install.bat``
在git环境下，输入``hub version``   
![image.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80NTU3NjY1LTQ0N2QzMmRlNWJjYmFkMDEucG5n?x-oss-process=image/format,png)


5. Travis CI

6. Coveralls

7. Gemnasium

8. Code Climate

9. Jenkins

10. Redmine

11. GitHub Flow

12. Git Flow——以发布为中心的开发模式

13. 

